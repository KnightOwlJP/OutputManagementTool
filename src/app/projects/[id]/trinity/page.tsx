'use client';

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { 
  Card, 
  CardBody, 
  CardHeader,
  Button as HeroButton,
  Chip,
  Progress,
  Switch,
  Spinner,
} from '@heroui/react';
import { 
  ArrowLeftIcon,
  ArrowPathIcon,
  CheckCircleIcon,
  ExclamationCircleIcon,
  ClockIcon,
  DocumentTextIcon,
  ChartBarIcon,
  BookOpenIcon,
  CubeTransparentIcon,
} from '@heroicons/react/24/outline';
import { AppLayout, SkeletonCard } from '@/components';
import { Manual } from '@/types/electron.d';

interface SyncStatus {
  bpmn: {
    count: number;
    lastSync?: string;
    hasChanges: boolean;
  };
  processes: {
    count: number;
    lastSync?: string;
    hasChanges: boolean;
  };
  manuals: {
    count: number;
    lastSync?: string;
    hasChanges: boolean;
  };
}

export default function TrinityDashboardPage() {
  const params = useParams();
  const router = useRouter();
  
  // URLから実際のプロジェクトIDを取得（静的エクスポート対応）
  const [projectId, setProjectId] = useState<string>('');

  const [syncStatus, setSyncStatus] = useState<SyncStatus>({
    bpmn: { count: 0, hasChanges: false },
    processes: { count: 0, hasChanges: false },
    manuals: { count: 0, hasChanges: false },
  });
  const [isLoading, setIsLoading] = useState(true);
  const [isSyncing, setIsSyncing] = useState(false);
  const [autoSyncEnabled, setAutoSyncEnabled] = useState(false);
  const [lastFullSync, setLastFullSync] = useState<string | null>(null);

  /**
   * URLからプロジェクトIDを抽出
   */
  useEffect(() => {
    const extractProjectId = () => {
      if (typeof window === 'undefined') return;
      
      const pathname = window.location.pathname;
      const match = pathname.match(/\/projects\/([^\/]+)/);
      const id = match ? match[1] : (params.id as string);
      
      if (id === 'placeholder') {
        setTimeout(extractProjectId, 100);
        return;
      }
      
      setProjectId(id);
    };

    extractProjectId();
  }, [params]);

  useEffect(() => {
    if (projectId) {
      loadStatus();
    }
  }, [projectId]);

  const loadStatus = async () => {
    setIsLoading(true);
    try {
      // BPMN一覧取得
      const bpmnList = await window.electronAPI.bpmn.getByProject(projectId);
      
      // 工程一覧取得
      const processList = await window.electronAPI.process.getByProject(projectId);
      
      // マニュアル一覧取得
      const manualList = await window.electronAPI.manual.getByProject(projectId);
      
      setSyncStatus({
        bpmn: {
          count: bpmnList.length,
          lastSync: bpmnList[0]?.updatedAt,
          hasChanges: false,
        },
        processes: {
          count: processList.length,
          lastSync: processList[0]?.updatedAt,
          hasChanges: false,
        },
        manuals: {
          count: manualList.length,
          lastSync: manualList[0]?.updatedAt,
          hasChanges: false,
        },
      });
    } catch (error) {
      console.error('[Trinity] Failed to load status:', error);
      alert('ステータスの読み込みに失敗しました');
    } finally {
      setIsLoading(false);
    }
  };

  const handleFullSync = async () => {
    if (!confirm('全体の同期を実行します。よろしいですか？')) {
      return;
    }

    setIsSyncing(true);
    try {
      const bpmnList = await window.electronAPI.bpmn.getByProject(projectId);
      
      if (bpmnList.length === 0) {
        alert('BPMNダイアグラムが存在しません。まずBPMNを作成してください。');
        return;
      }

      // Step 1: BPMN → 工程表
      console.log('[Trinity] Step 1: BPMN → 工程表 同期開始');
      const bpmnResult = await window.electronAPI.sync.bpmnToProcesses(projectId, bpmnList[0].id);
      
      // Step 2: 工程表 → BPMN
      console.log('[Trinity] Step 2: 工程表 → BPMN 同期開始');
      await window.electronAPI.sync.processesToBpmn(projectId, bpmnList[0].id);
      
      // Step 3: 工程表 → マニュアル
      console.log('[Trinity] Step 3: 工程表 → マニュアル 同期開始');
      const manualList = await window.electronAPI.manual.getByProject(projectId);
      let syncedManualsCount = 0;
      
      if (manualList.length > 0) {
        // 既存の自動生成マニュアルを同期
        const autoManuals = manualList.filter((m: Manual) => m.autoGenerated);
        syncedManualsCount = autoManuals.length;
        // Phase 6では工程表との自動同期は構造のみ
        // 各マニュアルの更新は手動または将来のPhaseで実装
        console.log(`[Trinity] ${syncedManualsCount}件の自動生成マニュアルを検出`);
      }
      
      setLastFullSync(new Date().toISOString());
      await loadStatus();
      
      alert(`三位一体同期完了！\n\nBPMN→工程: ${bpmnResult.created}件作成、${bpmnResult.updated}件更新\n工程→BPMN: 完了\n工程→マニュアル: ${syncedManualsCount}件同期`);
    } catch (error) {
      console.error('[Trinity] Failed to sync:', error);
      alert(`同期に失敗しました: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setIsSyncing(false);
    }
  };

  const handleAutoSyncToggle = async (enabled: boolean) => {
    try {
      if (enabled) {
        await window.electronAPI.sync.startWatch(projectId);
        alert('自動同期を有効にしました');
      } else {
        await window.electronAPI.sync.stopWatch(projectId);
        alert('自動同期を無効にしました');
      }
      setAutoSyncEnabled(enabled);
    } catch (error) {
      console.error('[Trinity] Failed to toggle auto sync:', error);
      alert('自動同期の切り替えに失敗しました');
    }
  };

  const formatDate = (dateString?: string) => {
    if (!dateString) return '未同期';
    const date = new Date(dateString);
    return date.toLocaleString('ja-JP', {
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const getSyncStatusColor = (hasChanges: boolean) => {
    return hasChanges ? 'warning' : 'success';
  };

  if (isLoading) {
    return (
      <AppLayout>
        <div className="flex items-center justify-center min-h-[400px]">
          <Spinner size="lg" label="読み込み中..." />
        </div>
      </AppLayout>
    );
  }

  const totalItems = syncStatus.bpmn.count + syncStatus.processes.count + syncStatus.manuals.count;
  const syncHealth = totalItems > 0 ? 100 : 0;

  return (
    <AppLayout>
      <div className="max-w-7xl mx-auto space-y-6">
        {/* ヘッダー */}
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <button
              onClick={() => router.push(`/projects/${projectId}/`)}
              className="p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
              title="プロジェクトに戻る"
            >
              <ArrowLeftIcon className="w-5 h-5 text-gray-600 dark:text-gray-400" />
            </button>
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-50">三位一体同期ダッシュボード</h1>
              <p className="text-xs text-gray-500 dark:text-gray-500 mt-0.5">
                BPMN ⇔ 工程表 ⇔ マニュアル の統合管理
              </p>
            </div>
          </div>

          <div className="flex items-center gap-3">
            <div className="flex items-center gap-2 px-3 py-1.5 bg-gray-100 dark:bg-gray-700 rounded-lg">
              <Switch
                isSelected={autoSyncEnabled}
                onValueChange={handleAutoSyncToggle}
                size="sm"
              />
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">自動同期</span>
            </div>
            <HeroButton
              color="primary"
              size="md"
              onClick={handleFullSync}
              disabled={isSyncing}
              className="font-semibold shadow-md hover:shadow-lg transition-shadow whitespace-nowrap bg-blue-600 hover:bg-blue-700 text-white"
              startContent={<ArrowPathIcon className={`w-5 h-5 ${isSyncing ? 'animate-spin' : ''}`} />}
            >
              {isSyncing ? '同期中...' : '全体同期'}
            </HeroButton>
          </div>
        </div>

        {/* 同期ステータス概要 */}
        <Card className="shadow-sm">
          <CardBody className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-50">
                  同期ステータス
                </h2>
                <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                  最終全体同期: {lastFullSync ? formatDate(lastFullSync) : '未実施'}
                </p>
              </div>
              <Chip
                color={syncHealth === 100 ? 'success' : 'warning'}
                variant="flat"
                startContent={syncHealth === 100 ? <CheckCircleIcon className="w-4 h-4" /> : <ExclamationCircleIcon className="w-4 h-4" />}
              >
                {syncHealth === 100 ? '正常' : '要確認'}
              </Chip>
            </div>

            <Progress
              value={syncHealth}
              color={syncHealth === 100 ? 'success' : 'warning'}
              className="mb-2"
            />
            <p className="text-xs text-gray-500 dark:text-gray-400">
              同期の健全性: {syncHealth}%
            </p>
          </CardBody>
        </Card>

        {/* 三要素のステータス */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* BPMN */}
          <Card 
            className="shadow-sm hover:shadow-md transition-shadow cursor-pointer"
            isPressable
            onPress={() => router.push(`/projects/${projectId}/bpmn`)}
          >
            <CardHeader className="flex items-center justify-between p-4">
              <div className="flex items-center gap-3">
                <div className="bg-purple-500 bg-opacity-10 p-2 rounded-lg">
                  <DocumentTextIcon className="w-6 h-6 text-purple-500" />
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900 dark:text-gray-50">BPMN</h3>
                  <p className="text-xs text-gray-500 dark:text-gray-400">ダイアグラム</p>
                </div>
              </div>
              <Chip
                size="sm"
                color={getSyncStatusColor(syncStatus.bpmn.hasChanges)}
                variant="flat"
              >
                {syncStatus.bpmn.hasChanges ? '変更あり' : '同期済み'}
              </Chip>
            </CardHeader>
            <CardBody className="p-4 pt-0">
              <div className="space-y-2">
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-600 dark:text-gray-400">ダイアグラム数:</span>
                  <span className="font-semibold text-gray-900 dark:text-gray-50">
                    {syncStatus.bpmn.count}
                  </span>
                </div>
                <div className="flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400">
                  <ClockIcon className="w-4 h-4" />
                  <span>最終更新: {formatDate(syncStatus.bpmn.lastSync)}</span>
                </div>
              </div>
            </CardBody>
          </Card>

          {/* 工程表 */}
          <Card 
            className="shadow-sm hover:shadow-md transition-shadow cursor-pointer"
            isPressable
            onPress={() => router.push(`/projects/${projectId}/hierarchy`)}
          >
            <CardHeader className="flex items-center justify-between p-4">
              <div className="flex items-center gap-3">
                <div className="bg-blue-500 bg-opacity-10 p-2 rounded-lg">
                  <ChartBarIcon className="w-6 h-6 text-blue-500" />
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900 dark:text-gray-50">工程表</h3>
                  <p className="text-xs text-gray-500 dark:text-gray-400">プロセス</p>
                </div>
              </div>
              <Chip
                size="sm"
                color={getSyncStatusColor(syncStatus.processes.hasChanges)}
                variant="flat"
              >
                {syncStatus.processes.hasChanges ? '変更あり' : '同期済み'}
              </Chip>
            </CardHeader>
            <CardBody className="p-4 pt-0">
              <div className="space-y-2">
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-600 dark:text-gray-400">工程数:</span>
                  <span className="font-semibold text-gray-900 dark:text-gray-50">
                    {syncStatus.processes.count}
                  </span>
                </div>
                <div className="flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400">
                  <ClockIcon className="w-4 h-4" />
                  <span>最終更新: {formatDate(syncStatus.processes.lastSync)}</span>
                </div>
              </div>
            </CardBody>
          </Card>

          {/* マニュアル */}
          <Card 
            className="shadow-sm hover:shadow-md transition-shadow cursor-pointer"
            isPressable
            onPress={() => router.push(`/projects/${projectId}/manuals`)}
          >
            <CardHeader className="flex items-center justify-between p-4">
              <div className="flex items-center gap-3">
                <div className="bg-green-500 bg-opacity-10 p-2 rounded-lg">
                  <BookOpenIcon className="w-6 h-6 text-green-500" />
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900 dark:text-gray-50">マニュアル</h3>
                  <p className="text-xs text-gray-500 dark:text-gray-400">手順書</p>
                </div>
              </div>
              <Chip
                size="sm"
                color={getSyncStatusColor(syncStatus.manuals.hasChanges)}
                variant="flat"
              >
                {syncStatus.manuals.hasChanges ? '変更あり' : '同期済み'}
              </Chip>
            </CardHeader>
            <CardBody className="p-4 pt-0">
              <div className="space-y-2">
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-600 dark:text-gray-400">マニュアル数:</span>
                  <span className="font-semibold text-gray-900 dark:text-gray-50">
                    {syncStatus.manuals.count}
                  </span>
                </div>
                <div className="flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400">
                  <ClockIcon className="w-4 h-4" />
                  <span>最終更新: {formatDate(syncStatus.manuals.lastSync)}</span>
                </div>
              </div>
            </CardBody>
          </Card>
        </div>

        {/* 同期フローの説明 */}
        <Card className="shadow-sm">
          <CardHeader className="p-4">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-50">
              三位一体同期のしくみ
            </h3>
          </CardHeader>
          <CardBody className="p-4 pt-0">
            <div className="space-y-4">
              <div className="flex items-start gap-3">
                <div className="bg-purple-100 dark:bg-purple-900 p-2 rounded-full">
                  <span className="text-purple-700 dark:text-purple-300 font-bold text-sm">1</span>
                </div>
                <div className="flex-1">
                  <h4 className="font-semibold text-gray-900 dark:text-gray-50 mb-1">
                    BPMN → 工程表
                  </h4>
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    BPMNダイアグラムのタスクを解析し、工程表に自動反映します。
                    タスクの追加・更新・削除が同期されます。
                  </p>
                </div>
              </div>

              <div className="flex items-start gap-3">
                <div className="bg-blue-100 dark:bg-blue-900 p-2 rounded-full">
                  <span className="text-blue-700 dark:text-blue-300 font-bold text-sm">2</span>
                </div>
                <div className="flex-1">
                  <h4 className="font-semibold text-gray-900 dark:text-gray-50 mb-1">
                    工程表 → BPMN
                  </h4>
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    工程表で追加・変更された情報をBPMNダイアグラムに反映します。
                    双方向で整合性を保ちます。
                  </p>
                </div>
              </div>

              <div className="flex items-start gap-3">
                <div className="bg-green-100 dark:bg-green-900 p-2 rounded-full">
                  <span className="text-green-700 dark:text-green-300 font-bold text-sm">3</span>
                </div>
                <div className="flex-1">
                  <h4 className="font-semibold text-gray-900 dark:text-gray-50 mb-1">
                    工程表 → マニュアル
                  </h4>
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    工程表の階層構造からマニュアルのアウトラインを自動生成します。
                    工程名の変更も自動的にマニュアルに反映されます。
                  </p>
                </div>
              </div>
            </div>

            <div className="mt-6 bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
              <h4 className="font-semibold text-blue-900 dark:text-blue-100 mb-2">
                💡 活用のヒント
              </h4>
              <ul className="text-sm text-blue-800 dark:text-blue-200 space-y-1">
                <li>• 自動同期を有効にすると、変更が即座に反映されます</li>
                <li>• 定期的に全体同期を実行して、整合性を保ちましょう</li>
                <li>• Phase 6では構造のみ。Phase 7で詳細コンテンツが自動生成されます</li>
              </ul>
            </div>
          </CardBody>
        </Card>
      </div>
    </AppLayout>
  );
}

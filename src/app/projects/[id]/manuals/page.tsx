'use client';

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { 
  Card, 
  CardBody, 
  CardHeader,
  Button as HeroButton,
  Dropdown,
  DropdownTrigger,
  DropdownMenu,
  DropdownItem,
  Chip,
  Input,
  Textarea,
} from '@heroui/react';
import { 
  ArrowLeftIcon,
  BookOpenIcon,
  PlusIcon,
  MagnifyingGlassIcon,
  EllipsisVerticalIcon,
  DocumentTextIcon,
  ClockIcon,
  ArrowPathIcon,
  TrashIcon,
  ArrowDownTrayIcon,
  SparklesIcon,
} from '@heroicons/react/24/outline';
import { AppLayout, Modal, SkeletonCard } from '@/components';

interface Manual {
  id: string;
  projectId: string;
  title: string;
  description?: string;
  autoGenerated: boolean;
  lastSyncAt?: string;
  createdAt: string;
  updatedAt: string;
}

export default function ManualsPage() {
  const params = useParams();
  const router = useRouter();
  
  // URLから実際のプロジェクトIDを取得（静的エクスポート対応）
  const [projectId, setProjectId] = useState<string>('');

  const [manuals, setManuals] = useState<Manual[]>([]);
  const [filteredManuals, setFilteredManuals] = useState<Manual[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isGenerateModalOpen, setIsGenerateModalOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // 作成フォーム
  const [newTitle, setNewTitle] = useState('');
  const [newDescription, setNewDescription] = useState('');

  /**
   * URLからプロジェクトIDを抽出
   */
  useEffect(() => {
    const extractProjectId = () => {
      if (typeof window === 'undefined') return;
      
      const pathname = window.location.pathname;
      const match = pathname.match(/\/projects\/([^\/]+)/);
      const id = match ? match[1] : (params.id as string);
      
      if (id === 'placeholder') {
        setTimeout(extractProjectId, 100);
        return;
      }
      
      setProjectId(id);
    };

    extractProjectId();
  }, [params]);

  useEffect(() => {
    if (projectId) {
      loadManuals();
    }
  }, [projectId]);

  useEffect(() => {
    // 検索フィルタリング
    if (!searchQuery.trim()) {
      setFilteredManuals(manuals);
    } else {
      const query = searchQuery.toLowerCase();
      setFilteredManuals(
        manuals.filter(m => 
          m.title.toLowerCase().includes(query) ||
          (m.description?.toLowerCase().includes(query) ?? false)
        )
      );
    }
  }, [searchQuery, manuals]);

  const loadManuals = async () => {
    setIsLoading(true);
    try {
      const result = await window.electronAPI.manual.getByProject(projectId);
      setManuals(result || []);
    } catch (error) {
      console.error('[Manuals] Failed to load manuals:', error);
      // データがない場合はエラーとして扱わない（新規プロジェクトの場合）
    } finally {
      setIsLoading(false);
    }
  };

  const handleCreateManual = async () => {
    if (!newTitle.trim()) {
      alert('マニュアルタイトルを入力してください');
      return;
    }

    setIsSubmitting(true);
    try {
      await window.electronAPI.manual.create({
        projectId,
        title: newTitle.trim(),
        description: newDescription.trim() || undefined,
      });
      
      setIsCreateModalOpen(false);
      setNewTitle('');
      setNewDescription('');
      await loadManuals();
    } catch (error) {
      console.error('[Manuals] Failed to create manual:', error);
      alert('マニュアルの作成に失敗しました');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleGenerateFromProcesses = async () => {
    setIsSubmitting(true);
    try {
      await window.electronAPI.manual.generateFromProcesses({
        projectId,
        title: 'プロセスマニュアル（自動生成）',
      });
      setIsGenerateModalOpen(false);
      await loadManuals();
    } catch (error) {
      console.error('[Manuals] Failed to generate manual:', error);
      alert('工程表からのマニュアル生成に失敗しました');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDeleteManual = async (manualId: string) => {
    if (!confirm('このマニュアルを削除してもよろしいですか？')) {
      return;
    }

    try {
      await window.electronAPI.manual.delete(manualId);
      await loadManuals();
    } catch (error) {
      console.error('[Manuals] Failed to delete manual:', error);
      alert('マニュアルの削除に失敗しました');
    }
  };

  const handleExportManual = async (manualId: string, format: 'markdown' | 'html' | 'pdf') => {
    try {
      await window.electronAPI.manual.export(manualId, format);
      alert(`マニュアルを${format.toUpperCase()}形式でエクスポートしました`);
    } catch (error) {
      console.error('[Manuals] Failed to export manual:', error);
      alert('マニュアルのエクスポートに失敗しました');
    }
  };

  const handleSyncManual = async (manualId: string) => {
    try {
      // Phase 6では工程表との同期は構造のみで、手動更新が必要
      // 将来のPhaseで自動同期機能を実装予定
      alert('この機能は今後のアップデートで実装予定です。\n現在は手動でマニュアルを更新してください。');
      await loadManuals();
    } catch (error) {
      console.error('[Manuals] Failed to sync manual:', error);
      alert('マニュアルの同期に失敗しました');
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleString('ja-JP', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  return (
    <AppLayout>
      <div className="max-w-7xl mx-auto space-y-6">
        {/* ヘッダー */}
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <button
              onClick={() => router.push(`/projects/${projectId}/`)}
              className="p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
              title="プロジェクトに戻る"
            >
              <ArrowLeftIcon className="w-5 h-5 text-gray-600 dark:text-gray-400" />
            </button>
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-50">マニュアル管理</h1>
              <p className="text-xs text-gray-500 dark:text-gray-500 mt-0.5">
                工程に基づいたマニュアルを作成・管理
              </p>
            </div>
          </div>

          <div className="flex gap-2">
            <HeroButton
              color="default"
              size="md"
              variant="flat"
              className="font-semibold whitespace-nowrap border-2 border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700"
              onClick={() => setIsGenerateModalOpen(true)}
              startContent={<SparklesIcon className="w-5 h-5" />}
            >
              工程表から生成
            </HeroButton>
            <HeroButton
              color="primary"
              size="md"
              className="font-semibold shadow-md hover:shadow-lg transition-shadow whitespace-nowrap bg-blue-600 hover:bg-blue-700 text-white"
              onClick={() => setIsCreateModalOpen(true)}
              startContent={<PlusIcon className="w-5 h-5" />}
            >
              新規作成
            </HeroButton>
          </div>
        </div>

        {/* 検索バー */}
        <Card className="shadow-sm">
          <CardBody className="p-4">
            <Input
              placeholder="マニュアルを検索..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              startContent={<MagnifyingGlassIcon className="w-5 h-5 text-gray-400" />}
              classNames={{
                input: "text-sm",
                inputWrapper: "shadow-sm",
              }}
            />
          </CardBody>
        </Card>

        {/* マニュアル一覧 */}
        {isLoading ? (
          <div className="space-y-4">
            <SkeletonCard />
            <SkeletonCard />
            <SkeletonCard />
          </div>
        ) : filteredManuals.length === 0 ? (
          <Card className="shadow-sm">
            <CardBody className="p-12 text-center">
              <BookOpenIcon className="w-16 h-16 text-gray-300 dark:text-gray-700 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-700 dark:text-gray-300 mb-2">
                {searchQuery ? 'マニュアルが見つかりません' : 'マニュアルがありません'}
              </h3>
              <p className="text-sm text-gray-500 dark:text-gray-400 mb-6">
                {searchQuery 
                  ? '検索条件を変更してください' 
                  : '新規作成または工程表から自動生成してください'
                }
              </p>
              {!searchQuery && (
                <div className="flex gap-3 justify-center">
                  <HeroButton
                    variant="bordered"
                    onClick={() => setIsGenerateModalOpen(true)}
                    startContent={<SparklesIcon className="w-5 h-5" />}
                  >
                    工程表から生成
                  </HeroButton>
                  <HeroButton
                    color="primary"
                    onClick={() => setIsCreateModalOpen(true)}
                    startContent={<PlusIcon className="w-5 h-5" />}
                  >
                    新規作成
                  </HeroButton>
                </div>
              )}
            </CardBody>
          </Card>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {filteredManuals.map((manual) => (
              <Card 
                key={manual.id} 
                className="shadow-sm hover:shadow-md transition-shadow cursor-pointer"
                isPressable
                onPress={() => router.push(`/projects/${projectId}/manuals/${manual.id}`)}
              >
                <CardHeader className="flex justify-between items-start p-4 pb-0">
                  <div className="flex items-start gap-3 flex-1">
                    <div className="bg-blue-500 bg-opacity-10 p-2 rounded-lg flex-shrink-0">
                      <DocumentTextIcon className="w-5 h-5 text-blue-500" />
                    </div>
                    <div className="flex-1 min-w-0">
                      <h3 className="font-semibold text-gray-900 dark:text-gray-50 truncate">
                        {manual.title}
                      </h3>
                      {manual.autoGenerated && (
                        <Chip 
                          size="sm" 
                          color="secondary" 
                          variant="flat"
                          className="mt-1"
                        >
                          自動生成
                        </Chip>
                      )}
                    </div>
                  </div>
                  
                  <Dropdown>
                    <DropdownTrigger>
                      <HeroButton
                        isIconOnly
                        size="sm"
                        variant="light"
                        onClick={(e) => e.stopPropagation()}
                      >
                        <EllipsisVerticalIcon className="w-5 h-5" />
                      </HeroButton>
                    </DropdownTrigger>
                    <DropdownMenu 
                      aria-label="マニュアル操作"
                      onAction={(key) => {
                        if (key === 'sync') handleSyncManual(manual.id);
                        if (key === 'export-md') handleExportManual(manual.id, 'markdown');
                        if (key === 'export-html') handleExportManual(manual.id, 'html');
                        if (key === 'export-pdf') handleExportManual(manual.id, 'pdf');
                        if (key === 'delete') handleDeleteManual(manual.id);
                      }}
                    >
                      {manual.autoGenerated ? (
                        <DropdownItem 
                          key="sync"
                          startContent={<ArrowPathIcon className="w-4 h-4" />}
                        >
                          工程表と同期
                        </DropdownItem>
                      ) : null}
                      <DropdownItem 
                        key="export-md"
                        startContent={<ArrowDownTrayIcon className="w-4 h-4" />}
                      >
                        Markdownエクスポート
                      </DropdownItem>
                      <DropdownItem 
                        key="export-html"
                        startContent={<ArrowDownTrayIcon className="w-4 h-4" />}
                      >
                        HTMLエクスポート
                      </DropdownItem>
                      <DropdownItem 
                        key="export-pdf"
                        startContent={<ArrowDownTrayIcon className="w-4 h-4" />}
                      >
                        PDFエクスポート
                      </DropdownItem>
                      <DropdownItem 
                        key="delete"
                        color="danger"
                        className="text-danger"
                        startContent={<TrashIcon className="w-4 h-4" />}
                      >
                        削除
                      </DropdownItem>
                    </DropdownMenu>
                  </Dropdown>
                </CardHeader>

                <CardBody className="p-4 pt-2">
                  {manual.description && (
                    <p className="text-sm text-gray-600 dark:text-gray-400 mb-3 line-clamp-2">
                      {manual.description}
                    </p>
                  )}
                  
                  <div className="space-y-1 text-xs text-gray-500 dark:text-gray-400">
                    <div className="flex items-center gap-2">
                      <ClockIcon className="w-4 h-4" />
                      <span>更新: {formatDate(manual.updatedAt)}</span>
                    </div>
                    {manual.autoGenerated && manual.lastSyncAt && (
                      <div className="flex items-center gap-2">
                        <ArrowPathIcon className="w-4 h-4" />
                        <span>同期: {formatDate(manual.lastSyncAt)}</span>
                      </div>
                    )}
                  </div>
                </CardBody>
              </Card>
            ))}
          </div>
        )}

        {/* 新規作成モーダル */}
        <Modal
          isOpen={isCreateModalOpen}
          onClose={() => {
            setIsCreateModalOpen(false);
            setNewTitle('');
            setNewDescription('');
          }}
          title="マニュアル新規作成"
          size="xl"
          showConfirmButton
          confirmText="作成"
          onConfirm={handleCreateManual}
          isConfirmDisabled={isSubmitting || !newTitle.trim()}
          isConfirmLoading={isSubmitting}
          confirmColor="primary"
        >
          <div className="space-y-6">
            <div className="space-y-3">
              <Input
                label="タイトル"
                placeholder="マニュアルのタイトルを入力"
                value={newTitle}
                onChange={(e) => setNewTitle(e.target.value)}
                isRequired
                autoFocus
                classNames={{
                  base: "w-full",
                  input: "text-base",
                  inputWrapper: "min-h-[48px] px-4 py-3 border-2",
                }}
              />
            </div>
            
            <div className="space-y-3">
              <Textarea
                label="説明（任意）"
                placeholder="マニュアルの説明を入力"
                value={newDescription}
                onChange={(e) => setNewDescription(e.target.value)}
                minRows={4}
                maxRows={8}
                classNames={{
                  base: "w-full",
                  input: "text-base resize-none",
                  inputWrapper: "px-4 py-3 border-2",
                }}
              />
            </div>
          </div>
        </Modal>

        {/* 工程表から生成モーダル */}
        <Modal
          isOpen={isGenerateModalOpen}
          onClose={() => setIsGenerateModalOpen(false)}
          title="工程表からマニュアル生成"
          size="xl"
          showConfirmButton
          confirmText="生成"
          onConfirm={handleGenerateFromProcesses}
          isConfirmDisabled={isSubmitting}
          isConfirmLoading={isSubmitting}
          confirmColor="primary"
          confirmIcon={<SparklesIcon className="w-4 h-4" />}
        >
          <div className="space-y-4">
            <div className="p-5 bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-950 dark:to-indigo-950 border-2 border-blue-200 dark:border-blue-800 rounded-xl">
              <h4 className="font-semibold text-blue-900 dark:text-blue-100 mb-3 flex items-center gap-2">
                <DocumentTextIcon className="w-5 h-5" />
                生成内容
              </h4>
              <ul className="text-sm text-blue-800 dark:text-blue-200 space-y-2 ml-1">
                <li className="flex items-start gap-2">
                  <span className="text-blue-500 mt-0.5 font-bold">•</span>
                  <span>工程表の階層構造に基づいたアウトライン</span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="text-blue-500 mt-0.5 font-bold">•</span>
                  <span>大工程 → 章、中工程 → 節として構造化</span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="text-blue-500 mt-0.5 font-bold">•</span>
                  <span>小工程・詳細工程はプレースホルダー</span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="text-blue-500 mt-0.5 font-bold">•</span>
                  <span>自動同期機能付き（工程名変更を反映）</span>
                </li>
              </ul>
            </div>

            <div className="p-4 bg-gradient-to-br from-amber-50 to-orange-50 dark:from-amber-950 dark:to-orange-950 border-2 border-amber-200 dark:border-amber-800 rounded-xl">
              <p className="text-sm text-amber-900 dark:text-amber-200 flex items-start gap-2">
                <span className="text-xl">⚠️</span>
                <span className="flex-1">現在のPhaseでは構造のみを生成します。詳細な内容は手動で入力してください。</span>
              </p>
            </div>
          </div>
        </Modal>
      </div>
    </AppLayout>
  );
}

// Electron API型定義
export interface ElectronAPI {
  project: {
    create: (data: CreateProjectDto) => Promise<Project>;
    getAll: () => Promise<Project[]>;
    getById: (projectId: string) => Promise<Project>;
    update: (projectId: string, data: UpdateProjectDto) => Promise<Project>;
    delete: (projectId: string) => Promise<boolean>;
  };
  file: {
    openFileDialog: (options?: any) => Promise<string | null>;
    saveFileDialog: (options?: any) => Promise<string | null>;
    importExcel: (projectId: string, filePath: string) => Promise<any>;
    exportExcel: (projectId: string, fileName: string) => Promise<string>;
  };
  process: {
    create: (data: CreateProcessDto) => Promise<Process>;
    getById: (processId: string) => Promise<Process>;
    getByProject: (projectId: string) => Promise<Process[]>;
    update: (processId: string, data: UpdateProcessDto) => Promise<Process>;
    delete: (processId: string) => Promise<boolean>;
    move: (processId: string, newParentId: string | null) => Promise<Process>;
    reorder: (processId: string, newDisplayOrder: number) => Promise<boolean>;
  };
  bpmn: {
    create: (data: CreateBpmnDto) => Promise<BpmnDiagram>;
    getById: (bpmnId: string) => Promise<BpmnDiagram>;
    getByProject: (projectId: string) => Promise<BpmnDiagram[]>;
    update: (bpmnId: string, data: { xmlContent?: string; name?: string }) => Promise<BpmnDiagram>;
    delete: (bpmnId: string) => Promise<boolean>;
  };
  version: {
    create: (data: CreateVersionDto) => Promise<Version>;
    getByProject: (projectId: string) => Promise<Version[]>;
    getById: (versionId: string) => Promise<Version>;
    restore: (versionId: string) => Promise<boolean>;
    delete: (versionId: string) => Promise<boolean>;
  };
  sync: {
    bpmnToProcesses: (projectId: string, bpmnId: string) => Promise<{ created: number; updated: number; deleted: number }>;
    processesToBpmn: (projectId: string, bpmnId: string) => Promise<boolean>;
    bidirectional: (projectId: string, bpmnId: string) => Promise<{ bpmnToProcesses: any; processesToBpmn: boolean }>;
    getProcessByBpmnElementId: (projectId: string, elementId: string) => Promise<Process | null>;
    resolveConflict: (projectId: string, elementId: string, resolution: 'bpmn' | 'process') => Promise<boolean>;
    startWatch: (projectId: string) => Promise<boolean>;
    stopWatch: (projectId: string) => Promise<boolean>;
  };
  manual: {
    create: (data: CreateManualDto) => Promise<Manual>;
    getByProject: (projectId: string) => Promise<Manual[]>;
    getById: (manualId: string) => Promise<Manual>;
    update: (manualId: string, data: UpdateManualDto) => Promise<Manual>;
    delete: (manualId: string) => Promise<boolean>;
    generateFromProcesses: (data: GenerateManualDto) => Promise<Manual>;
    export: (manualId: string, format: 'markdown' | 'html' | 'pdf') => Promise<string>;
  };
  system: {
    platform: string;
    version: string;
  };
}

// Window型拡張
declare global {
  interface Window {
    electron: ElectronAPI;
    electronAPI: ElectronAPI; // 互換性のため両方保持
  }
}

// DTO型定義
export interface CreateProjectDto {
  name: string;
  description?: string;
}

export interface UpdateProjectDto {
  name?: string;
  description?: string;
}

export interface CreateProcessDto {
  projectId: string;
  name: string;
  level: ProcessLevel;
  parentId?: string;
  department?: string;
  assignee?: string;
  documentType?: string;
  startDate?: Date;
  endDate?: Date;
  description?: string;
}

export interface UpdateProcessDto {
  name?: string;
  department?: string;
  assignee?: string;
  documentType?: string;
  startDate?: Date;
  endDate?: Date;
  status?: string;
  description?: string;
}

export interface CreateBpmnDto {
  projectId: string;
  name: string;
  xmlContent?: string;
  processId?: string;
}

export interface CreateVersionDto {
  projectId: string;
  message: string;
  tag?: string;
  author?: string;
}

export interface ExcelData {
  processes: Process[];
  metadata?: Record<string, any>;
}

export interface VersionDiff {
  added: Process[];
  modified: Process[];
  deleted: Process[];
  bpmnChanges?: any;
}

export interface CreateManualDto {
  projectId: string;
  title: string;
  description?: string;
}

export interface UpdateManualDto {
  title?: string;
  description?: string;
}

export interface GenerateManualOptions {
  title?: string;
  includeDetailProcesses?: boolean;
}

export interface GenerateManualDto {
  projectId: string;
  title: string;
  options?: GenerateManualOptions;
}

export interface Manual {
  id: string;
  projectId: string;
  title: string;
  description?: string;
  autoGenerated: boolean;
  lastSyncAt?: string;
  createdAt: string;
  updatedAt: string;
}

export interface ManualSection {
  id: string;
  manualId: string;
  title: string;
  content: string;
  level: number;
  parentId?: string;
  displayOrder: number;
  processId?: string;
  syncStatus?: 'synced' | 'modified' | 'conflict';
  autoGenerated: boolean;
  createdAt: string;
  updatedAt: string;
}

// 他の型定義のインポート
export type { Project, Process, ProcessLevel, BpmnDiagram, Version } from './project.types';
